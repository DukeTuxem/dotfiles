"           |  \
"  __     __ \▓▓______ ____   ______   _______
" |  \   /  \  \      \    \ /      \ /       \
"  \▓▓\ /  ▓▓ ▓▓ ▓▓▓▓▓▓\▓▓▓▓\  ▓▓▓▓▓▓\  ▓▓▓▓▓▓▓
"   \▓▓\  ▓▓| ▓▓ ▓▓ | ▓▓ | ▓▓ ▓▓   \▓▓ ▓▓
"    \▓▓ ▓▓ | ▓▓ ▓▓ | ▓▓ | ▓▓ ▓▓     | ▓▓_____
"     \▓▓▓  | ▓▓ ▓▓ | ▓▓ | ▓▓ ▓▓      \▓▓     \
"      \▓    \▓▓\▓▓  \▓▓  \▓▓\▓▓       \▓▓▓▓▓▓▓


" Useless because a vimrc file was found but still, an explicit setting.
set nocompatible


" =============================================================================
" Always use the XDG Base Directory specification
" =============================================================================

" Note: this has been implemented in version 9.1.327:
" This needs to precede any configuration since it manipulates the runtimepath.

" Refuse to run if there are some missing environment variables set
" (for plugin manager auto install essentially)
if !exists('$XDG_CONFIG_HOME') ||
	\ !exists('$XDG_DATA_HOME') ||
	\ !exists('$XDG_CACHE_HOME')
	echoerr "One or all XDG_ environment variables are not defined!"
		\ "Vim will exit..."
	exit!
endif

" This is copied from: https://wiki.archlinux.org/title/XDG_Base_Directory

" :h set-args (^=)
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p')

set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p')
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')

call mkdir($XDG_STATE_HOME."/vim", 'p')
if !has('nvim') | set viminfofile=$XDG_STATE_HOME/vim/viminfo | endif


" =============================================================================
" User configuration
" =============================================================================

let mapleader = "\\"

""" This is a trick that allows my custom configuration to be split
""" under the plugin/ directory.
""" I don't intend to use Vim without colors or plugins anyway,
""" but `filetype plugin on` is required for plugin/ to be processed.

" Enables automatic filetype detection, loads related system/user plugins and
" indentation settings based on the filetype.
" See :scriptnames for load order.
filetype plugin indent on
" Logically, syntax can only be achieved on detected filetypes, so after.
syntax on



" Vimrc:
" quick edit vimrc in a new tab
nnoremap <silent> <leader>V :tabnew $MYVIMRC<CR>zozz
" check for any mistake in this file as soon as it is written
augroup sourceVimrcOnSave
	autocmd!
	autocmd BufWritePost * nested if expand($MYVIMRC) ==# expand('%:p')
				\ | source $MYVIMRC
				\ | echo ".vimrc saved and reloaded!"
				\ | endif
augroup END
