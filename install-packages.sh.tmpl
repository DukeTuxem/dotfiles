#!/usr/bin/env sh

echo "INFO - Current shell: $(ps -p $$ -o comm=)"

if [ ! -f "./utils.sh" ];
then
	printf 'This script must be run from within ~/.local/share/chezmoi'
	exit 1
fi
. ./utils.sh

which_linux_profile()
{
	# Retrieve all profiles and trim the last whitespace
	profile_list='{{range $key, $value := .linux.profiles}}{{$key}} {{end}}'
	profile_list=${profile_list%${profile_list##*[![:space:]]}}
	nb_profiles=$(count "$profile_list")
	if [ "$nb_profiles" -eq 0 ]; then
		echo "$0: Error, no linux profiles found in profiles.yaml"
		exit 1
	fi

	# User prompting
	echo "$0: Select a profile to install from the following list:"
	count=1
	for profile in $(split "$profile_list"); do
		printf "$0: [$count] $profile\n"
		count=$(($count + 1))
	done

	# Force a choice
	choice=
	while [ -z "$choice" ] || ! is_number "$choice" \
		|| [ "$choice" -lt 1 ] || [ "$choice" -gt "$nb_profiles" ]; do
		echo "$0: Please select a value between 1 and $nb_profiles"
		printf "%s: %s" "$0" "$1"
		read -r choice
	done

	count=1
	for profile in $(split "$profile_list"); do
		if [ "$count" -eq "$choice" ]; then
			break
		fi
	done
	# Since every variable is global, $profile is set with the last break
	# Anyway, I am not imaginating having a thousand profile to manage...
	echo "$0: $profile will be installed !"

	unset nb_profiles count choice profile_list
}

install_core_profile()
{
	core="{{ range .linux.profiles.core -}} {{.}} {{ end}}"

	case "$distro" in
		'debian' | 'ubuntu')
			core="$core {{ range .linux.debian.core -}} {{.}} {{ end}}"
			eval "sudo apt-get install $core"
			;;
		'void')
			core="$core {{ range .linux.void.core -}} {{.}} {{ end}}"
			eval "sudo xbps-install $core"
			;;
		'arch')
			# No range
			eval "sudo pacman -S $core"
			;;
	esac
	unset core
}

install_desktop_profile()
{
	# depends_on: core
	install_core_profile

	desktop="{{ range .linux.profiles.desktop -}} {{.}} {{ end}}"

	case "$distro" in
		'debian' | 'ubuntu')
			desktop="$desktop {{ range .linux.debian.desktop -}} {{.}} {{ end}}"
			eval "sudo apt-get install $desktop"
			;;
		'void')
			desktop="$desktop {{ range .linux.void.desktop -}} {{.}} {{ end}}"
			eval "sudo xbps-install $desktop"
			;;
		'arch')
			# No range .linux.arch.desktop
			eval "sudo pacman -S $desktop"
			;;
	esac

	unset desktop
}

operating_system="$(uname -s)"
if [ "$operating_system" = 'Linux' ]
then
	echo "$0: Linux operating system detected"
	detect_linux

	which_linux_profile
	[ "$profile" = "core" ] && install_core_profile
	[ "$profile" = "desktop" ] && install_desktop_profile
	return 0

elif [ "$operating_system" = "FreeBSD" ]
then
	echo "(Free)BSD Unimplemented"
	return 1
else
	echo "Unsupported platform for now"
	return 1
fi

# vim: ft=sh fen
